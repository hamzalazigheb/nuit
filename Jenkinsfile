pipeline {
    agent any
    
    parameters {
        string(name: 'REPO_URL', defaultValue: '', description: 'Git repository URL')
        string(name: 'SONAR_PROJECT_NAME', defaultValue: '', description: 'SonarQube project name')
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    if (params.REPO_URL == '') {
                        error "Git repository URL not provided."
                    }
                    // Clone repository
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: params.REPO_URL]]])
                }
            }
        }
        
        stage('Create SonarQube Project') {
            steps {
                script {
                    // Generate a dynamic project key based on the repository URL
                    def projectName = params.SONAR_PROJECT_NAME ?: 'AutoGeneratedProject'
                    def projectKey = projectName.replaceAll('[^a-zA-Z0-9]', '_')
                    
                    // Use SonarQube Web API to create a new project
                    // You'll need to authenticate and construct the appropriate API call
                    // Example:
                    sh "curl -X POST -u admin:12341234 'https://22d8-196-179-220-246.ngrok-free.app/api/projects/create?name=${projectName}&project=${projectKey}'"
                    
                    // Set the generated project key as an environment variable for later stages
                    env.SONAR_PROJECT_KEY = projectKey
                }
            }
        }
        
        stage('Run SonarQube Analysis') {
            steps {
                script {
                    // Retrieve SonarScanner tool
                    def scannerHome = tool 'sonar-server'
                    
                    // Run SonarQube analysis
                    withSonarQubeEnv('sonarqube-server') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${env.SONAR_PROJECT_KEY}"
                    }
                }
            }
        }
        
        stage('Run Snyk Test') {
            steps {
                script {
                    // Run Snyk test
                    snykSecurity(
                        snykInstallation: 'snyk@latest',
                        snykTokenId: 'organisation-snyk-api-token',
                        // Add other parameters as needed
                    )
                }
            }
        }
    }
